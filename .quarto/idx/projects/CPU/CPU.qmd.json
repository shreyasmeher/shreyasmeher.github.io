{"title":"CPU Usage","markdown":{"yaml":{"title":"CPU Usage","format":"html","filters":["shinylive"]},"headingText":"Embedded Shiny application","containsRefs":false,"markdown":"\n\n\n\nThis is a CPU usage widget that is created using shiny & python. Code edited from - https://quarto-ext.github.io/shinylive/. \n\n```{shinylive-python}\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nimport sys\n\nif \"pyodide\" in sys.modules:\n    # psutil doesn't work on pyodide--use fake data instead\n    from fakepsutil import cpu_count, cpu_percent\n\n    shinylive_message = \"Note: the CPU data is simulated when running in Shinylive.\"\nelse:\n    from psutil import cpu_count, cpu_percent\n\n    shinylive_message = \"\"\n\nfrom math import ceil\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\n# The agg matplotlib backend seems to be a little more efficient than the default when\n# running on macOS, and also gives more consistent results across operating systems\nmatplotlib.use(\"agg\")\n\n# max number of samples to retain\nMAX_SAMPLES = 1000\n# secs between samples\nSAMPLE_PERIOD = 1\n\n\nncpu = cpu_count(logical=True)\n\napp_ui = ui.page_fluid(\n    ui.tags.style(\n        \"\"\"\n        /* Don't apply fade effect, it's constantly recalculating */\n        .recalculating {\n            opacity: 1;\n        }\n        tbody > tr:last-child {\n            /*border: 3px solid var(--bs-dark);*/\n            box-shadow:\n                0 0 2px 1px #fff, /* inner white */\n                0 0 4px 2px #0ff, /* middle cyan */\n                0 0 5px 3px #00f; /* outer blue */\n        }\n        #table table {\n            table-layout: fixed;\n            width: %s;\n            font-size: 0.8em;\n        }\n        th, td {\n            text-align: center;\n        }\n        \"\"\"\n        % f\"{ncpu*4}em\"\n    ),\n    ui.h3(\"CPU Usage %\", class_=\"mt-2\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_select(\n                \"cmap\",\n                \"Colormap\",\n                {\n                    \"inferno\": \"inferno\",\n                    \"viridis\": \"viridis\",\n                    \"copper\": \"copper\",\n                    \"prism\": \"prism (not recommended)\",\n                },\n            ),\n            ui.p(ui.input_action_button(\"reset\", \"Clear history\", class_=\"btn-sm\")),\n            ui.input_switch(\"hold\", \"Freeze output\", value=False),\n            shinylive_message,\n            class_=\"mb-3\",\n        ),\n        ui.panel_main(\n            ui.div(\n                {\"class\": \"card mb-3\"},\n                ui.div(\n                    {\"class\": \"card-body\"},\n                    ui.h5({\"class\": \"card-title mt-0\"}, \"Graphs\"),\n                    ui.output_plot(\"plot\", height=f\"{ncpu * 40}px\"),\n                ),\n                ui.div(\n                    {\"class\": \"card-footer\"},\n                    ui.input_numeric(\"sample_count\", \"Number of samples per graph\", 50),\n                ),\n            ),\n            ui.div(\n                {\"class\": \"card\"},\n                ui.div(\n                    {\"class\": \"card-body\"},\n                    ui.h5({\"class\": \"card-title m-0\"}, \"Heatmap\"),\n                ),\n                ui.div(\n                    {\"class\": \"card-body overflow-auto pt-0\"},\n                    ui.output_table(\"table\"),\n                ),\n                ui.div(\n                    {\"class\": \"card-footer\"},\n                    ui.input_numeric(\"table_rows\", \"Rows to display\", 5),\n                ),\n            ),\n        ),\n    ),\n)\n\n\n@reactive.Calc\ndef cpu_current():\n    reactive.invalidate_later(SAMPLE_PERIOD)\n    return cpu_percent(percpu=True)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    cpu_history = reactive.Value(None)\n\n    @reactive.Calc\n    def cpu_history_with_hold():\n        # If \"hold\" is on, grab an isolated snapshot of cpu_history; if not, then do a\n        # regular read\n        if not input.hold():\n            return cpu_history()\n        else:\n            # Even if frozen, we still want to respond to input.reset()\n            input.reset()\n            with reactive.isolate():\n                return cpu_history()\n\n    @reactive.Effect\n    def collect_cpu_samples():\n        \"\"\"cpu_percent() reports just the current CPU usage sample; this Effect gathers\n        them up and stores them in the cpu_history reactive value, in a numpy 2D array\n        (rows are CPUs, columns are time).\"\"\"\n\n        new_data = np.vstack(cpu_current())\n        with reactive.isolate():\n            if cpu_history() is None:\n                cpu_history.set(new_data)\n            else:\n                combined_data = np.hstack([cpu_history(), new_data])\n                # Throw away extra data so we don't consume unbounded amounts of memory\n                if combined_data.shape[1] > MAX_SAMPLES:\n                    combined_data = combined_data[:, -MAX_SAMPLES:]\n                cpu_history.set(combined_data)\n\n    @reactive.Effect(priority=100)\n    @reactive.event(input.reset)\n    def reset_history():\n        cpu_history.set(None)\n\n    @output\n    @render.plot\n    def plot():\n        history = cpu_history_with_hold()\n\n        if history is None:\n            history = np.array([])\n            history.shape = (ncpu, 0)\n\n        nsamples = input.sample_count()\n\n        # Throw away samples too old to fit on the plot\n        if history.shape[1] > nsamples:\n            history = history[:, -nsamples:]\n\n        ncols = 2\n        nrows = int(ceil(ncpu / ncols))\n        fig, axeses = plt.subplots(\n            nrows=nrows,\n            ncols=ncols,\n            squeeze=False,\n        )\n        for i in range(0, ncols * nrows):\n            row = i // ncols\n            col = i % ncols\n            axes = axeses[row, col]\n            if i >= len(history):\n                axes.set_visible(False)\n                continue\n            data = history[i]\n            axes.yaxis.set_label_position(\"right\")\n            axes.yaxis.tick_right()\n            axes.set_xlim(-(nsamples - 1), 0)\n            axes.set_ylim(0, 100)\n\n            assert len(data) <= nsamples\n\n            # Set up an array of x-values that will right-align the data relative to the\n            # plotting area\n            x = np.arange(0, len(data))\n            x = np.flip(-x)\n\n            # Color bars by cmap\n            color = plt.get_cmap(input.cmap())(data / 100)\n            axes.bar(x, data, color=color, linewidth=0, width=1.0)\n\n            axes.set_yticks([25, 50, 75])\n            for ytl in axes.get_yticklabels():\n                if col == ncols - 1 or i == ncpu - 1 or True:\n                    ytl.set_fontsize(7)\n                else:\n                    ytl.set_visible(False)\n                    hide_ticks(axes.yaxis)\n            for xtl in axes.get_xticklabels():\n                xtl.set_visible(False)\n            hide_ticks(axes.xaxis)\n            axes.grid(True, linewidth=0.25)\n\n        return fig\n\n    @output\n    @render.table\n    def table():\n        history = cpu_history_with_hold()\n        latest = pd.DataFrame(history).transpose().tail(input.table_rows())\n        if latest.shape[0] == 0:\n            return latest\n        return (\n            latest.style.format(precision=0)\n            .hide(axis=\"index\")\n            .set_table_attributes(\n                'class=\"dataframe shiny-table table table-borderless font-monospace\"'\n            )\n            .background_gradient(cmap=input.cmap(), vmin=0, vmax=100)\n        )\n\n\ndef hide_ticks(axis):\n    for ticks in [axis.get_major_ticks(), axis.get_minor_ticks()]:\n        for tick in ticks:\n            tick.tick1line.set_visible(False)\n            tick.tick2line.set_visible(False)\n            tick.label1.set_visible(False)\n            tick.label2.set_visible(False)\n\n\napp = App(app_ui, server)\n\n\n\n## file: fakepsutil.py\n\n\"\"\"Generates synthetic data\"\"\"\n\nimport numpy as np\n\n\ndef cpu_count(logical: bool = True):\n    return 8 if logical else 4\n\n\nlast_sample = np.random.uniform(0, 100, size=cpu_count(True))\n\n\ndef cpu_percent(interval=None, percpu=False):\n    global last_sample\n    delta = np.random.normal(scale=10, size=len(last_sample))\n    last_sample = (last_sample + delta).clip(0, 100)\n    if percpu:\n        return last_sample.tolist()\n    else:\n        return last_sample.mean()\n    \n## file: requirements.txt\n    \n# Pandas needs Jinja2 for table styling, but it doesn't (yet) load automatically\n# in Pyodide, so we need to explicitly list it here.\nJinja2\n    \n\n```\n\n\n","srcMarkdownNoYaml":"\n\n\n### Embedded Shiny application\n\nThis is a CPU usage widget that is created using shiny & python. Code edited from - https://quarto-ext.github.io/shinylive/. \n\n```{shinylive-python}\n#| standalone: true\n#| components: [editor, viewer]\n## file: app.py\nimport sys\n\nif \"pyodide\" in sys.modules:\n    # psutil doesn't work on pyodide--use fake data instead\n    from fakepsutil import cpu_count, cpu_percent\n\n    shinylive_message = \"Note: the CPU data is simulated when running in Shinylive.\"\nelse:\n    from psutil import cpu_count, cpu_percent\n\n    shinylive_message = \"\"\n\nfrom math import ceil\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, ui\n\n# The agg matplotlib backend seems to be a little more efficient than the default when\n# running on macOS, and also gives more consistent results across operating systems\nmatplotlib.use(\"agg\")\n\n# max number of samples to retain\nMAX_SAMPLES = 1000\n# secs between samples\nSAMPLE_PERIOD = 1\n\n\nncpu = cpu_count(logical=True)\n\napp_ui = ui.page_fluid(\n    ui.tags.style(\n        \"\"\"\n        /* Don't apply fade effect, it's constantly recalculating */\n        .recalculating {\n            opacity: 1;\n        }\n        tbody > tr:last-child {\n            /*border: 3px solid var(--bs-dark);*/\n            box-shadow:\n                0 0 2px 1px #fff, /* inner white */\n                0 0 4px 2px #0ff, /* middle cyan */\n                0 0 5px 3px #00f; /* outer blue */\n        }\n        #table table {\n            table-layout: fixed;\n            width: %s;\n            font-size: 0.8em;\n        }\n        th, td {\n            text-align: center;\n        }\n        \"\"\"\n        % f\"{ncpu*4}em\"\n    ),\n    ui.h3(\"CPU Usage %\", class_=\"mt-2\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_select(\n                \"cmap\",\n                \"Colormap\",\n                {\n                    \"inferno\": \"inferno\",\n                    \"viridis\": \"viridis\",\n                    \"copper\": \"copper\",\n                    \"prism\": \"prism (not recommended)\",\n                },\n            ),\n            ui.p(ui.input_action_button(\"reset\", \"Clear history\", class_=\"btn-sm\")),\n            ui.input_switch(\"hold\", \"Freeze output\", value=False),\n            shinylive_message,\n            class_=\"mb-3\",\n        ),\n        ui.panel_main(\n            ui.div(\n                {\"class\": \"card mb-3\"},\n                ui.div(\n                    {\"class\": \"card-body\"},\n                    ui.h5({\"class\": \"card-title mt-0\"}, \"Graphs\"),\n                    ui.output_plot(\"plot\", height=f\"{ncpu * 40}px\"),\n                ),\n                ui.div(\n                    {\"class\": \"card-footer\"},\n                    ui.input_numeric(\"sample_count\", \"Number of samples per graph\", 50),\n                ),\n            ),\n            ui.div(\n                {\"class\": \"card\"},\n                ui.div(\n                    {\"class\": \"card-body\"},\n                    ui.h5({\"class\": \"card-title m-0\"}, \"Heatmap\"),\n                ),\n                ui.div(\n                    {\"class\": \"card-body overflow-auto pt-0\"},\n                    ui.output_table(\"table\"),\n                ),\n                ui.div(\n                    {\"class\": \"card-footer\"},\n                    ui.input_numeric(\"table_rows\", \"Rows to display\", 5),\n                ),\n            ),\n        ),\n    ),\n)\n\n\n@reactive.Calc\ndef cpu_current():\n    reactive.invalidate_later(SAMPLE_PERIOD)\n    return cpu_percent(percpu=True)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    cpu_history = reactive.Value(None)\n\n    @reactive.Calc\n    def cpu_history_with_hold():\n        # If \"hold\" is on, grab an isolated snapshot of cpu_history; if not, then do a\n        # regular read\n        if not input.hold():\n            return cpu_history()\n        else:\n            # Even if frozen, we still want to respond to input.reset()\n            input.reset()\n            with reactive.isolate():\n                return cpu_history()\n\n    @reactive.Effect\n    def collect_cpu_samples():\n        \"\"\"cpu_percent() reports just the current CPU usage sample; this Effect gathers\n        them up and stores them in the cpu_history reactive value, in a numpy 2D array\n        (rows are CPUs, columns are time).\"\"\"\n\n        new_data = np.vstack(cpu_current())\n        with reactive.isolate():\n            if cpu_history() is None:\n                cpu_history.set(new_data)\n            else:\n                combined_data = np.hstack([cpu_history(), new_data])\n                # Throw away extra data so we don't consume unbounded amounts of memory\n                if combined_data.shape[1] > MAX_SAMPLES:\n                    combined_data = combined_data[:, -MAX_SAMPLES:]\n                cpu_history.set(combined_data)\n\n    @reactive.Effect(priority=100)\n    @reactive.event(input.reset)\n    def reset_history():\n        cpu_history.set(None)\n\n    @output\n    @render.plot\n    def plot():\n        history = cpu_history_with_hold()\n\n        if history is None:\n            history = np.array([])\n            history.shape = (ncpu, 0)\n\n        nsamples = input.sample_count()\n\n        # Throw away samples too old to fit on the plot\n        if history.shape[1] > nsamples:\n            history = history[:, -nsamples:]\n\n        ncols = 2\n        nrows = int(ceil(ncpu / ncols))\n        fig, axeses = plt.subplots(\n            nrows=nrows,\n            ncols=ncols,\n            squeeze=False,\n        )\n        for i in range(0, ncols * nrows):\n            row = i // ncols\n            col = i % ncols\n            axes = axeses[row, col]\n            if i >= len(history):\n                axes.set_visible(False)\n                continue\n            data = history[i]\n            axes.yaxis.set_label_position(\"right\")\n            axes.yaxis.tick_right()\n            axes.set_xlim(-(nsamples - 1), 0)\n            axes.set_ylim(0, 100)\n\n            assert len(data) <= nsamples\n\n            # Set up an array of x-values that will right-align the data relative to the\n            # plotting area\n            x = np.arange(0, len(data))\n            x = np.flip(-x)\n\n            # Color bars by cmap\n            color = plt.get_cmap(input.cmap())(data / 100)\n            axes.bar(x, data, color=color, linewidth=0, width=1.0)\n\n            axes.set_yticks([25, 50, 75])\n            for ytl in axes.get_yticklabels():\n                if col == ncols - 1 or i == ncpu - 1 or True:\n                    ytl.set_fontsize(7)\n                else:\n                    ytl.set_visible(False)\n                    hide_ticks(axes.yaxis)\n            for xtl in axes.get_xticklabels():\n                xtl.set_visible(False)\n            hide_ticks(axes.xaxis)\n            axes.grid(True, linewidth=0.25)\n\n        return fig\n\n    @output\n    @render.table\n    def table():\n        history = cpu_history_with_hold()\n        latest = pd.DataFrame(history).transpose().tail(input.table_rows())\n        if latest.shape[0] == 0:\n            return latest\n        return (\n            latest.style.format(precision=0)\n            .hide(axis=\"index\")\n            .set_table_attributes(\n                'class=\"dataframe shiny-table table table-borderless font-monospace\"'\n            )\n            .background_gradient(cmap=input.cmap(), vmin=0, vmax=100)\n        )\n\n\ndef hide_ticks(axis):\n    for ticks in [axis.get_major_ticks(), axis.get_minor_ticks()]:\n        for tick in ticks:\n            tick.tick1line.set_visible(False)\n            tick.tick2line.set_visible(False)\n            tick.label1.set_visible(False)\n            tick.label2.set_visible(False)\n\n\napp = App(app_ui, server)\n\n\n\n## file: fakepsutil.py\n\n\"\"\"Generates synthetic data\"\"\"\n\nimport numpy as np\n\n\ndef cpu_count(logical: bool = True):\n    return 8 if logical else 4\n\n\nlast_sample = np.random.uniform(0, 100, size=cpu_count(True))\n\n\ndef cpu_percent(interval=None, percpu=False):\n    global last_sample\n    delta = np.random.normal(scale=10, size=len(last_sample))\n    last_sample = (last_sample + delta).clip(0, 100)\n    if percpu:\n        return last_sample.tolist()\n    else:\n        return last_sample.mean()\n    \n## file: requirements.txt\n    \n# Pandas needs Jinja2 for table styling, but it doesn't (yet) load automatically\n# in Pyodide, so we need to explicitly list it here.\nJinja2\n    \n\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["shinylive"],"output-file":"CPU.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","theme":{"light":["flatly","../../mystyles.scss"],"dark":["darkly","../../custom-dark.scss"]},"title":"CPU Usage"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}